package Program;

import java.awt.Font;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Acer
 */

public class Dekripsi extends javax.swing.JFrame {
    static String pass = "", msg = "", filename = "";
    JFileChooser fc;
    File file;
    int isCorrectPass = 1;
    
    public Dekripsi() {
        initComponents();
        fc = new JFileChooser();
        fc.addChoosableFileFilter(new pngFilter());
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileView(new ImageFileView());
        fc.setAccessory(new ImagePreview(fc));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblJudul = new javax.swing.JLabel();
        lblJudul2 = new javax.swing.JLabel();
        lblJudul3 = new javax.swing.JLabel();
        lblJudul4 = new javax.swing.JLabel();
        txtBrowse = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPesan = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        imgPreview = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        btnDecode = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblCopyright = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnPilihan = new javax.swing.JMenu();
        mnEncode = new javax.swing.JMenuItem();
        mnDecode = new javax.swing.JMenuItem();
        mnKembali = new javax.swing.JMenuItem();
        mnBantuan = new javax.swing.JMenu();
        mnTeori = new javax.swing.JMenuItem();
        mnPenggunaan = new javax.swing.JMenuItem();
        mnTentang = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Decode");
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJudul.setFont(new java.awt.Font("Unispace", 1, 24)); // NOI18N
        lblJudul.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblJudul.setText("Stego Image");
        lblJudul.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblJudul, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, 50));

        lblJudul2.setFont(new java.awt.Font("Unispace", 1, 24)); // NOI18N
        lblJudul2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblJudul2.setText("Password");
        lblJudul2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblJudul2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, -1, 50));

        lblJudul3.setFont(new java.awt.Font("Unispace", 1, 24)); // NOI18N
        lblJudul3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblJudul3.setText("Pesan Teks");
        lblJudul3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblJudul3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, -1, 50));

        lblJudul4.setFont(new java.awt.Font("Unispace", 1, 24)); // NOI18N
        lblJudul4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblJudul4.setText("Image Preview");
        lblJudul4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblJudul4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 260, -1, 50));

        txtBrowse.setEditable(false);
        txtBrowse.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        getContentPane().add(txtBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 500, 50));

        txtPassword.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        getContentPane().add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, 350, 50));

        txtPesan.setEditable(false);
        txtPesan.setColumns(20);
        txtPesan.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        txtPesan.setRows(5);
        jScrollPane1.setViewportView(txtPesan);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, 500, 290));

        jScrollPane2.setViewportView(imgPreview);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 320, 560, 290));

        btnBrowse.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBrowse.setText("BROWSE");
        btnBrowse.setFocusPainted(false);
        btnBrowse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(btnBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 90, 150, 50));

        btnDecode.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDecode.setForeground(new java.awt.Color(255, 0, 0));
        btnDecode.setText("DECODE");
        btnDecode.setFocusPainted(false);
        btnDecode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeActionPerformed(evt);
            }
        });
        getContentPane().add(btnDecode, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 170, 150, 50));

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReset.setText("RESET");
        btnReset.setFocusPainted(false);
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 170, 150, 50));

        lblCopyright.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        lblCopyright.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCopyright.setText("Â© 2020 - Ervan Rahadian Hakim -");
        getContentPane().add(lblCopyright, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 640, 1260, 50));

        lblBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBackground.setIcon(new javax.swing.ImageIcon("C:\\Users\\msi\\Documents\\NetBeansProjects\\Steganografi\\Background3.jpg")); // NOI18N
        lblBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblBackground.setMaximumSize(new java.awt.Dimension(1280, 690));
        lblBackground.setMinimumSize(new java.awt.Dimension(1280, 690));
        lblBackground.setPreferredSize(new java.awt.Dimension(1280, 690));
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 690));

        jMenuBar1.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(50, 30));

        mnPilihan.setText("Pilihan");
        mnPilihan.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnPilihan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mnPilihan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mnPilihan.setPreferredSize(new java.awt.Dimension(80, 30));

        mnEncode.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnEncode.setText("Encode");
        mnEncode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnEncodeActionPerformed(evt);
            }
        });
        mnPilihan.add(mnEncode);

        mnDecode.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnDecode.setText("Decode");
        mnDecode.setEnabled(false);
        mnDecode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnPilihan.add(mnDecode);

        mnKembali.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnKembali.setText("Kembali");
        mnKembali.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnKembaliActionPerformed(evt);
            }
        });
        mnPilihan.add(mnKembali);

        jMenuBar1.add(mnPilihan);

        mnBantuan.setText("Bantuan");
        mnBantuan.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnBantuan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mnBantuan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mnBantuan.setPreferredSize(new java.awt.Dimension(80, 30));

        mnTeori.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnTeori.setText("Teori");
        mnTeori.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnTeori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnTeoriActionPerformed(evt);
            }
        });
        mnBantuan.add(mnTeori);

        mnPenggunaan.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnPenggunaan.setText("Cara Penggunaan");
        mnPenggunaan.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnPenggunaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPenggunaanActionPerformed(evt);
            }
        });
        mnBantuan.add(mnPenggunaan);

        mnTentang.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnTentang.setText("Tentang");
        mnTentang.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnTentang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnTentangActionPerformed(evt);
            }
        });
        mnBantuan.add(mnTentang);

        jMenuBar1.add(mnBantuan);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeActionPerformed
        UIManager.put("OptionPane.messageFont", new Font("Nirmala UI", Font.PLAIN, 18));
        if (txtBrowse.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Pilih Stego Image terlebih dahulu !", "Pemberitahuan",
            JOptionPane.INFORMATION_MESSAGE);
        }else{        
        try {
            msg = decrypt(code(filename), new BigInteger("3078434453"), new BigInteger("1846993025"));
        } catch (IOException ex) {
            Logger.getLogger(Dekripsi.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pass.equals(txtPassword.getText())) {
            txtPesan.setText(msg);
            JOptionPane.showMessageDialog(null, "Proses Decode Berhasil !", "Pemberitahuan",
            JOptionPane.INFORMATION_MESSAGE);
        } else {  
            String cipher= "";  
            for (int i = 0; i < msg.length(); i++) {  
            int index = msg.charAt(i);  
            char s = (char)(index+10) ;  
            cipher = cipher + String.valueOf(s);  
            }
            txtPassword.setText("");
            txtPesan.setText(cipher);
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan !", "Pemberitahuan",
            JOptionPane.INFORMATION_MESSAGE);
        }
        }
}//GEN-LAST:event_btnDecodeActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        int returnVal = fc.showOpenDialog(Dekripsi.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            filename = "" + file;
            txtBrowse.setText(filename);
            try {
                imgPreview.setIcon(new ImageIcon(ImageIO.read(new File(file.getPath()))));
                String coverpath = file.getPath();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
}//GEN-LAST:event_btnBrowseActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtPassword.setText("");
        txtBrowse.setText("");
        txtPesan.setText("");
        imgPreview.setIcon(null);
    }//GEN-LAST:event_btnResetActionPerformed

    private void mnEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnEncodeActionPerformed
        try {
            new Enkripsi().setVisible(true);
            this.setVisible(false);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnEncodeActionPerformed

    private void mnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnKembaliActionPerformed
        try {
            new Main().setVisible(true);
            this.setVisible(false);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnKembaliActionPerformed

    private void mnPenggunaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPenggunaanActionPerformed
        try  {
            new Penggunaan().setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnPenggunaanActionPerformed

    private void mnTentangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnTentangActionPerformed
        try  {
            new Tentang().setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnTentangActionPerformed

    private void mnTeoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnTeoriActionPerformed
        try  {
            new Teori().setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnTeoriActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dekripsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDecode;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel imgPreview;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCopyright;
    private javax.swing.JLabel lblJudul;
    private javax.swing.JLabel lblJudul2;
    private javax.swing.JLabel lblJudul3;
    private javax.swing.JLabel lblJudul4;
    private javax.swing.JMenu mnBantuan;
    private javax.swing.JMenuItem mnDecode;
    private javax.swing.JMenuItem mnEncode;
    private javax.swing.JMenuItem mnKembali;
    private javax.swing.JMenuItem mnPenggunaan;
    private javax.swing.JMenu mnPilihan;
    private javax.swing.JMenuItem mnTentang;
    private javax.swing.JMenuItem mnTeori;
    private javax.swing.JTextField txtBrowse;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextArea txtPesan;
    // End of variables declaration//GEN-END:variables
    public static BigInteger toDecimal(BigInteger t) {
        BigInteger s = new BigInteger("0"), rem, two = new BigInteger("2");
        BigInteger i = new BigInteger("1");
        while (t.compareTo(new BigInteger("0")) != 0) {
            rem = t.remainder(new BigInteger("10"));
            s = s.add(rem.multiply(i));
            i = i.multiply(new BigInteger("2"));
            t = t.divide(new BigInteger("10"));
        }
        return s;
    }

    public static String decrypt(String code, BigInteger n, BigInteger d) {
        String t = new String("");
        String binary[] = new String[1000000], msg1 = new String("");
        BigInteger decry[] = new BigInteger[1000000];
        BigInteger encry[] = new BigInteger[1000000];
        int j = -1;
        for (int i = 0; i < code.length(); i++) {
            if (i % 4 == 0) {
                j++;
                binary[j] = "";
            }
            t = Long.toBinaryString((long) (code.charAt(i)));
            for (int k = t.length(); k < 8; k++) {
                t = "0" + t;
            }
            binary[j] = binary[j] + t;
        }     
        for (int i = 0; i <= j; i++) {
            int a = 5;
            if (binary[i].equals("")) {
                break;
            }          
            BigInteger t1 = new BigInteger(binary[i], 10);
            encry[i] = toDecimal(t1);
            decry[i] = encry[i].modPow(d, n);
            binary[i] = Long.toBinaryString(decry[i].longValue());
            for (int pp = binary[i].length(); pp < 32; pp++) {
                binary[i] = "0" + binary[i];
            }        
            for (int k = 0; k < 25; k += 8) {
                if (binary[i].substring(k, k + 8).equals("00000000")) {
                    continue;
                }
                msg1 += (char) Integer.parseInt(binary[i].substring(k, k + 8), 2);
            }
        }
        return msg1;
    }

    public static int coprime(int n) {
        int i;
        for (i = 2; i <= n / 2; i++) {
            if (n % i != 0) {
                break;
            }
        }
        return (i);
    }

    public static String code(String pngfile) throws IOException {
        BufferedImage image = null;
        try {
            File file = new File(pngfile);
            image = ImageIO.read(file);
        } catch (IIOException e) {          
        }
        BufferedImage img = null;
        int w = image.getWidth();
        int h = image.getHeight();
        int pixels[] = new int[w * h];
        try {
            PixelGrabber pg = new PixelGrabber(image, 0, 0, w, h, pixels, 0, w);
            pg.grabPixels();
        } catch (Exception es) {         
        }
        int p = pixels[0];
        int b = 0xffffff & (p);
        String bin = "";       
        int nh = h;
        if (h % 2 == 0) {
            nh = h - 1;
        }
        int incre_w = coprime(w);
        int incre_h = coprime(nh);
        int k = incre_w;
        int l = incre_h;
        p = pixels[l * w + k];
        int b1 = 0xff & (p);
        k = k + incre_w;
        l = l + incre_h;
        for (int j = 0; j < b; j++) {
            p = pixels[l * w + k];
            int m = 0xff & (p);
            if (m % 2 == 0) {
                bin = bin + '0';
            } else {
                bin = bin + '1';
            }        
            k = k + incre_w;
            l = l + incre_h;
            if (k >= w) {
                k -= w;
            }
            if (l >= nh) {
                l -= nh;
            }
        }     
        String coded = "";
        pass = "";
        String bin1 = bin.substring(b - b1, b);
        bin = bin.substring(0, b - b1);
        k = bin.length();
        for (int j = 0; j < k; j += 8) {
            coded = coded + (char) Integer.parseInt(bin.substring(j, j + 8), 2);
        }
        k = bin1.length();
        for (int j = 0; j < k; j += 8) {
            pass = pass + (char) Integer.parseInt(bin1.substring(j, j + 8), 2);
        }
        pass = decrypt(pass, new BigInteger("3078434453"), new BigInteger("1846993025"));
        return (coded);
    }   
}