package Program;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author msi
 */

public class Teori extends javax.swing.JFrame {
    
    public Teori() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        lblCopyright = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnPilihan = new javax.swing.JMenu();
        mnKembali = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teori");
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1280, 690));
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        jTextPane1.setText("<html>\r\n  <head>\r\n\r\n  </head>\r\n  <body>\r\n\t<font size=\"5\" face=\"Nirmala UI\">\n\t<b>Steganografi</b>\n\t<p>Steganografi adalah ilmu dan seni menyembunyikan pesan rahasia di dalam pesan lain sehingga keberadaan pesan \n\trahasia tersebut tidak dapat diketahui. Steganografi berasal dari Bahasa Yunani, steganos yang berarti terselubung \n\tdan graphein yang berarti tulisan. Sehingga steganografi dapat diartikan sebagai tulisan yang terselubung.</p>\n\t<p>Steganografi termasuk dalam security through obscurity. Steganografi biasa digunakan oleh teroris, intelijen, \n\tatau militer dalam menyampaikan pesan sehingga tidak diketahui orang lain.</p>\n\t<p>Steganografi membutuhkan dua properti yaitu media penampung dan pesan rahasia. Media penampung \n\tyang umum digunakan adalah gambar, suara, video atau teks. Pesan yang disembunyikan dapat berupa \n\tsebuah teks, gambar, daftar barang, kode program atau pesan lain.</p>\n\t<p>Penggunaan steganografi bertujuan untuk menyamarkan keberadaan data rahasia sehingga sulit  dideteksi \n\tdan melidungi hak cipta suatu produk. Steganografi dapat dipandang sebagai kelanjutan kriptografi. Jika \n\tpada kriptografi, data yang telah disandikan atau ciphertext tetap tersedia, maka dengan steganografi \n\tciphertext dapat disembunyikan sehingga pihak ketiga tidak mengetahui keberadaannya. Data rahasia yang \n\tdisembunyikan dapat diekstraksi kembali persis sama seperti keadaan aslinya.</P>\n\t<p>Keuntungan steganografi dibandingkan dengan kriptografi adalah bahwa pesan yang dikirim tidak menarik \n\tperhatian sehingga media penampung yang membawa pesan tidak menimbulkan kecurigaan bagi pihak \n\tketiga. Ini berbeda dengan kriptografi dimana ciphertext menimbulkan kecurigaan bahwa pesan tersebut \n\tmerupakan pesan rahasia.</p><br>\n\t\n\t<b>Algoritma Least Significant Bit (LSB)</b>\n\t<p>Algoritma Least Significant Bit merupakan teknik subtitusi pada steganografi, biasanya, arsip 24-bit atau 8-bit \n\tdigunakan untuk menyimpan citra digital. Representasi warna dari piksel bisa diperoleh dari warna-warna \n\tpokok, yaitu merah, hijau dan biru. Citra 24-bit menggunakan 3 bytes untuk masing-masing piksel, kemudian \n\tsetiap warna pokok direpresentasikan dengan ukuran 1 byte. Penggunaan citra 24-bit memungkinkan setiap \n\tpiksel direpresentasikan dengan nilai warna sebanyak 16.777.216 macam. Dua bit dari saluran warna tersebut \n\tbisa digunakan untuk menyembunyikan data, yang akan mengubah jenis warna piksel-nya menjadi 64 warna. \n\tNamun, hal itu akan mengakibatkan sedikit perbedaan yang bisa dideteksi secara kasat mata oleh manusia. \n\tAlgoritma sederhana itu disebut Least Significant Bit (LSB).</p><br>\n\t\n\t<b>Kriptografi</b>\n\t<p>Kriptografi berasal dari Bahasa Yunani, terdiri dari dua suku kata yaitu kripto dan graphia. Kripto artinya \n\tmenyembunyikan, sedangkan graphia artinya tulisan. Kriptografi adalah ilmu yang mempelajari teknik-teknik \n\tmatematika yang berhubungan dengan aspek keamanan informasi, seperti kerahasiaan data, validitas data, \n\tintegritas data, serta autentikasi data. Tetapi tidak semua aspek keamanan informasi dapat diselesaikan \n\tdengan kriptografi.</p>\n\t<p>Kriptografi dapat pula diartikan sebagai ilmu atau seni untuk menjaga keamanan pesan. Pada prinsipnya, \n\tkriptografi memiliki 4 komponen utama yaitu Plaintext pesan yang dapat dibaca, Ciphertext pesan acak yang \n\ttidak dapat dibaca, Key sebuah kunci untuk melakukan teknik kriptografi dan Algorithm metode untuk \n\tmelakukan enkrispi dan dekripsi.</p><br>\n\t\n\t<b>Algoritma Cipher</b>\n\t<p>Algoritma Cipher merupakan teknik substitusi yang membentuk cipher dengan cara melakukan penukaran \n\tkarakter pada plaintext menjadi tepat satu karakter pada ciphertext. Teknik seperti ini disebut juga sebagai \n\tsandi abjad tunggal. Sandi ini termasuk sandi substitusi dimana setiap huruf pada teks (plaintext) digantikan \n\toleh huruf lain yang memiliki selisih posisi tertentu dalam alfabet.</p><br>\n\t\n\t<b>Perbedaan Steganografi dan Kriptografi</b>\n\t<p>Perbedaan yang mendasar mengenai kriptografi dan steganografi adalah hasil tampilan pesan ketika sudah \n\tdisisipi pesan rahasia. Pada kriptografi pesan yang sudah disisipi pesan rahasia akan sangat berbeda dengan \n\tpesan sebelum disisipi pesan rahasia. Maka bagi pihak ketiga yang melihat pesan hasil keluaran kriptografi \n\takan curiga walaupun pihak ketiga tersebut juga tidak mengetahui maksud dari pesan tersebut.</P>\n\t<p>Sedangkan pada steganografi, pesan yang sudah disisipi pesan rahasia akan tampak sama (dengan kasat \n\tmata) dengan pesan sebelum disisipi pesan rahasia (pesan rahasia tersamarkan dalam cover text). Sehingga \n\tpihak ketiga tidak tahu bahwa dibalik pesan asli (cover text) tersembunyi pesan rahasia dibaliknya.</p>\n\t</font>\n  </body>\r\n</html>\r\n");
        jScrollPane1.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 1000, 550));

        lblCopyright.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        lblCopyright.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCopyright.setText("Â© 2020 - Ervan Rahadian Hakim -");
        getContentPane().add(lblCopyright, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 640, 1260, 50));

        lblBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBackground.setIcon(new javax.swing.ImageIcon("C:\\Users\\msi\\Documents\\NetBeansProjects\\Steganografi\\Background2.jpg")); // NOI18N
        lblBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 690));

        jMenuBar1.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(50, 30));

        mnPilihan.setText("Pilihan");
        mnPilihan.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnPilihan.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        mnPilihan.setPreferredSize(new java.awt.Dimension(80, 30));

        mnKembali.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        mnKembali.setText("Kembali");
        mnKembali.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mnKembali.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnKembaliActionPerformed(evt);
            }
        });
        mnPilihan.add(mnKembali);

        jMenuBar1.add(mnPilihan);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnKembaliActionPerformed
        try {
            this.setVisible(false);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnKembaliActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Teori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Teori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Teori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Teori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Teori().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Penggunaan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCopyright;
    private javax.swing.JMenuItem mnKembali;
    private javax.swing.JMenu mnPilihan;
    // End of variables declaration//GEN-END:variables
}